<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Tech @ Namshi.com]]></title>
  <link href="http://namshi.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://namshi.github.io/"/>
  <updated>2014-09-08T21:57:32+04:00</updated>
  <id>http://namshi.github.io/</id>
  <author>
    <name><![CDATA[Namshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Newsletter #54]]></title>
    <link href="http://namshi.github.io/blog/2014/09/04/newsletter-number-54/"/>
    <updated>2014-09-04T11:17:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/09/04/newsletter-number-54</id>
    <content type="html"><![CDATA[<p>It&rsquo;s <a href="/blog/categories/techthursday/">TechThursday</a> again!</p>

<blockquote><p>Big news, in case you missed it: we&rsquo;re going public!</p>

<p><a href="http://kinnevik.se/en/Media/Press-releases/Kinnevik-and-Rocket-Internet-to-create-global-fashion-e-commerce-group/">http://kinnevik.se/en/Media/Press-releases/Kinnevik-and-Rocket-Internet-to-create-global-fashion-e-commerce-group/</a></p></blockquote>

<p>This week we&rsquo;ve been quite busy, in fact we announced
that <a href="/blog/2014/08/31/welcome-daniel/">Daniel is joining us</a> and
we took the time to talk about how we <a href="/blog/2014/09/02/innovate-payment-gate-way-library/">process payments</a>
and how we&rsquo;ve been trying to shift more to a
<a href="/blog/2014/09/01/5-devops-practices-you-should-consider-starting-today/">devops-ish culture</a> &mdash; long road ahead though!</p>

<p>Last but not least, we also wrote an article explaining
<a href="/blog/2014/08/31/php-generators-explained/">generators in PHP</a>
for whoever has missed them so far!</p>

<p>But what has the team been looking at over the past week? Below
you&rsquo;ll find the usual list of interesting articles we discovered
in the past 7 days.</p>

<!-- more -->


<ul>
<li><a href="http://buff.ly/1xbWXrt">JoliCI: run your CI builds locally, through docker</a></li>
<li><a href="http://buff.ly/1nWsdBi">Design how your objects talk through mocking</a></li>
<li><a href="http://buff.ly/Y9oaM6">HHVM Long Term Support</a></li>
<li><a href="http://buff.ly/1nmUssN">Configuring Redis High Availability</a></li>
<li><a href="http://speakingjs.com/">Another awesome book on JavaScript</a></li>
<li><a href="http://duojs.org/">Next generation package manager for the front-end</a></li>
<li><a href="http://tc39wiki.calculist.org/es6/">Redesigned TC39 ES6 Features</a></li>
<li><a href="https://github.com/medikoo/es6-symbol">ES-6 symbols shims for node</a></li>
<li><a href="https://github.com/reactphp/vagrant">React Vagrant</a></li>
<li><a href="http://code.tutsplus.com/series/working-with-symfony-2--cms-636">Working with Symfony 2</a></li>
<li><a href="http://arstechnica.com/information-technology/2014/08/is-there-a-benefit-to-compiling-your-code-as-you-go/">Is there a benefit to compiling your code as you go?</a></li>
<li><a href="https://gist.github.com/mathisonian/c325dbe02ea4d6880c4e">requiring npm modules in the browser console</a></li>
<li><a href="http://perf.fail/">perf.fail &ndash; do, learn, fail forward.</a></li>
<li><a href="http://samlambert.com/posts/how-we-work-on-queries-at-gitHub/">How we work on queries at github</a></li>
<li><a href="http://blog.flux7.com/benchmarking-analyzing-aws-m3-instances-for-performance-bandwidth">Benchmarking: Analyzing AWS m3 Instances for Performance, Bandwidth</a></li>
<li><a href="http://opensource.com/business/14/9/security-for-docker">Bringing new security features to Docker</a></li>
<li><a href="http://www.drdobbs.com/architecture-and-design/containers-for-development/240168801">Containers for Development</a></li>
<li><a href="http://www.davidmkerr.com/2014/08/dockerfile-golf-or-optimizing-docker.html">Dockerfile Golf (or optimizing the Docker build process) </a></li>
<li><a href="http://blog.ezyang.com/2014/08/the-fundamental-problem-of-programming-language-package-management/">The fundamental problem of programming language package management</a></li>
<li><a href="http://softwaredefinedtalk.com/">SoftwareDefinedTalk</a></li>
<li><a href="http://techblog.netflix.com/2014/08/announcing-scumblr-and-sketchy-search.html">Scumblr is an interesting tool for keeping an eye on potential exploits or discussions of your company/application elsewhere on the internet. All sorts of potential monitoring applications for this: https://github.com/netflix/scumblr</a></li>
<li><a href="https://github.com/spotify/helios">Helios is another docker orchestration platform designed for managing containers across a large fleet. Instructive documentation, debian packages and a vagrant setup for trying it out are all plus points</a></li>
<li><a href="https://github.com/ConradIrwin/aws-name-server">DNS server that lets you look up ec2 instances by instance name</a></li>
<li><a href="https://www.skylight.io/">Skylight is a smart profiler data detective code whisperer bug catcher flag raiser for rails apps</a></li>
<li><a href="http://www.liquibase.org/">Liquibase:&ndash; Source control for your database</a></li>
<li><a href="http://dweet.io/">dweet.io: Ridiculously simple messaging (and alerts) for the Internet of Things</a></li>
<li><a href="https://github.com/slap-editor/slap">Slap: Sublime-like terminal-based text editor</a></li>
<li><a href="http://pre-commit.com/">Pre-commit:&ndash;  A framework for managing and maintaining multi-language pre-commit hooks</a></li>
<li><a href="http://www.youtube.com/watch?v=aQipuiTcn3U">Julie Ralph (from Google) talks about End to End Angular Testing with Protractor</a></li>
<li><a href="http://www.appcelerator.com/blog/2012/05/comparing-titanium-and-phonegap/">Comparing Titanium and PhoneGap (Mobile app development)</a></li>
<li><a href="http://maurizzzio.github.io/PojoViz/public/vulcanize.htm">PojoViz &ndash; Plain Old JavaScript Object Visualization</a></li>
<li><a href="https://github.com/newrelic/centurion/">A mass deployment tool for Docker fleets</a></li>
<li><a href="https://github.com/josephyzhou/github-trending">Tracking the most popular Github repos, updated daily</a></li>
<li><a href="http://devops.com/blogs/specialists-vs-generalists-enterprise-devops/">Specialists vs. Generalists for Enterprise DevOps</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node-file-ensure, a small filesystem utility to make sure a file is there]]></title>
    <link href="http://namshi.github.io/blog/2014/08/22/node-file-ensure-a-small-filesystem-utility-to-make-sure-a-file-is-there/"/>
    <updated>2014-08-22T19:42:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/08/22/node-file-ensure-a-small-filesystem-utility-to-make-sure-a-file-is-there</id>
    <content type="html"><![CDATA[<p>This weekend we&rsquo;ve come up with a small utility
that will make our life easier, and hopefully <strong>yours</strong>
as well!</p>

<!-- more -->


<p>We use cascading mechanisms for our configurations, so, for
example, we define the config in a few different files:</p>

<ul>
<li><code>base.yml</code>, that has all the common configurations</li>
<li><code>dev.yml</code>, which is for local environments</li>
<li><code>staging.yml</code>, which is for our staging environment</li>
<li><code>live.yml</code>, well&hellip;you guessed it!</li>
</ul>


<p>So, for example, a <code>live.yml</code> might look like:</p>

<p><code>yaml
domain:   'namshi.com'
</code></p>

<p>whereas the base one has many more values:</p>

<p>
<code>yaml
apis:
  version:   'v1'
  domain:    'api.{{ domain }}'
  baseUrl:   'https://{{ apis.domain }}'
</code>
</p>

<p>There&rsquo;s a problem with this approach: if one of the developers
wants to change a value in his <code>dev.js</code> git will tell him that
the file has changed, which is quite annoying!</p>

<p>To overcome this we always put it in the <code>.gitignore</code>:</p>

<p><code>
dev.yml
</code></p>

<p>and instead commit a <code>dev.yml.example</code> file that has the
skeleton of the file, asking everyone, when booting the application
for the first time, to copy that file to a <code>dev.js</code>.</p>

<p>Things work flawlessly until you need to do this 10 times
(I mean, in 10 projects, like we do) or when you forget this step
during the installation and waste a lot of time trying to debug why
the application is not running correctly.</p>

<p>To overcome this annoying issue we decided to develop a small utility,
<a href="https://github.com/namshi/node-file-ensure">node-file-ensure</a>, that
does all of this for you:</p>

<p>``` javascript
var ensure = require(&lsquo;file-ensure&rsquo;);</p>

<p>ensure(&lsquo;./config/dev.yml&rsquo;, {from: &lsquo;./config/dev.yml.example&rsquo;});
```</p>

<p>Simple as that!</p>

<p><code>ensure</code> will make sure to create an empty file if it doesnt find
the one you specified:</p>

<p><code>javascript
ensure('./config/dev.yml');
</code></p>

<p>and is able to copy the contents from another file,
like in the first example above:</p>

<p><code>javascript
ensure('./config/dev.yml', {from: './config/dev.yml.example'});
</code></p>

<p>If you need to run any check after <code>ensure</code> has run,
you can provide a callback:</p>

<p><code>javascript
ensure('path/to/config/dev.yml', {src: 'path/to/config/dev.yml.example'}, function(err){
  console.log(fs.readFileSync('path/to/config/dev.yml').toString() === fs.readFileSync('path/to/config/dev.yml.example').toString());
});
</code></p>

<p>That&rsquo;s it! Tests run through mocha and we&rsquo;ve set them up
on <a href="https://travis-ci.org/namshi/node-file-ensure">travis</a>,
to be on the safe side :)</p>

<p>If you have patches, suggestions or rants&hellip;feel free to open
an <a href="https://github.com/namshi/node-file-ensure/issues">issue on GitHub</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #46]]></title>
    <link href="http://namshi.github.io/blog/2014/07/10/newsletter-number-46/"/>
    <updated>2014-07-10T10:07:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/07/10/newsletter-number-46</id>
    <content type="html"><![CDATA[<p>As usual, it&rsquo;s #TechThursday!</p>

<!-- more -->


<blockquote><p>We wanted to take a moment to share the <a href="http://www.gofundme.com/b9dfcg">fundraiser for
Joe Watkins</a>, a very
active contributor to the PHP core ecosystem, who has
recently struggled and is looking for some help.</p></blockquote>

<p>And&hellip;what about us?</p>

<p>This week we&rsquo;ve been talking about <a href="http://buff.ly/1j5avP6">rules to follow when writing OS code</a>
and are still very excited for <a href="/team#Oluwaseun%20Obajobi">Oba</a>, who is gonna be in Las Vegas to attend
the <a href="http://tech.namshi.com/blog/2014/07/05/a-bit-of-namshi-at-the-2014-aws-re-invent/">AWS re:invent</a> later this year.</p>

<p>Hungry for tech news and tutorials, the team has collected this amazing list of
resources over the past weeK:</p>

<ul>
<li><a href="http://techcrunch.com/2014/07/07/programmer-craig-muth-kickstarts-a-new-version-of-his-arguably-amazing-shell-xiki/">Programmer Craig Muth Kickstarts A New Version Of His (Arguably Amazing) Shell, Xiki</a></li>
<li><a href="http://startuptabs.com/">Startup Tabs, Discover a new startup on each new tab</a></li>
<li><a href="http://nakedsecurity.sophos.com/2014/07/07/remember-macro-viruses-infected-word-and-excel-files-theyre-back/">Remember macro viruses? Infected Word and Excel files? They&rsquo;re back&hellip;</a></li>
<li><a href="http://brikis98.blogspot.ae/2014/05/dont-learn-to-code-learn-to-think.html">Don&rsquo;t learn to code. Learn to think.</a></li>
<li><a href="https://www.apichangelog.com/">API Changelog monitors the docs of APIs you depend on and sends you notifications when they change</a></li>
<li><a href="https://medium.com/code-adventures/4ba9e7f3e52b">Farewell NodeJs, Hello Go</a></li>
<li><a href="http://www.google.com/design/">Design @ Google</a></li>
<li><a href="http://www.techempower.com/benchmarks/">Web Framework Benchmarks</a></li>
<li><a href="http://buff.ly/1jZU0ip">Rob Pike&rsquo;s Rules of Programming</a></li>
<li><a href="http://www.mysqlperformanceblog.com/2014/07/08/timestamp-columns-amazon-rds-5-6-and-you/">TIMESTAMP Columns, Amazon RDS 5.6, and You</a></li>
<li><a href="http://flux7.com/blogs/uncategorized/examining-elastic-load-balancing-policies/?utm_source=Flux7+Blog+Subscriptions&amp;utm_medium=email&amp;utm_campaign=74cd5ecda2-RSS_EMAIL_CAMPAIGN&amp;utm_term=0_3f65e75df7-74cd5ecda2-108386453">Examining Elastic Load Balancing Policies</a></li>
<li><a href="https://simplytestable.com/">Automated front-end web testing</a></li>
<li><a href="https://xpect.io/">Xpect.io helps you monitor any piece of code as fast as copy-pasting, so you can be assured that what you did yesterday, is still working today. Get instantly notified so problems can be contained before they adversely affect your business</a></li>
<li><a href="https://www.getstacker.com">Stacker:&ndash; The Easiest way to Publish &amp; Reply on Social Media</a></li>
<li><a href="https://appthwack.com">AppThwack:&ndash; Test your app on 100s of real Android and iOS devices in the cloud</a></li>
<li><a href="https://www.twilert.com/">Twilert:&ndash; Get realtime alerts via email when your brand names, keywords or hashtags are mentioned on Twitter </a></li>
<li><a href="http://blog.pagerduty.com/2014/06/10-common-ops-mistakes/">10 Common Ops Mistakes</a></li>
<li><a href="http://techblog.netflix.com/2014/06/announcing-security-monkey-aws-security.html">Netflix introduces new Security Monkey</a></li>
<li><a href="https://github.com/whummer/toaster">Toaster:&ndash; Automated testing of Infrastructure as Code automation scripts (e.g., Chef)</a></li>
<li><a href="http://www.ibm.com/developerworks/library/d-security-considerations-devops-adoption/index.html">Security considerations for DevOps adoption</a></li>
<li><a href="http://buff.ly/1qcuj20">HTTP API Design guide</a></li>
<li><a href="http://buff.ly/1zkxbzU">So you want to be a PHP Developer?</a></li>
<li><a href="http://buff.ly/1qOTAD4">Google Has Given #HTTPS a Huge Boost</a></li>
<li><a href="http://buff.ly/1jhGmfT">The Next Big #Programming Language You’ve Never Heard Of</a></li>
<li><a href="http://buff.ly/1ou121C">Inbox — The next-generation email platform</a></li>
<li><a href="http://buff.ly/1j99JRc">New Low Cost EC2 Instances with Burstable Performance</a></li>
<li><a href="http://buff.ly/1q4ZA6Y">Call me maybe: Elasticsearch gotchas</a></li>
<li><a href="http://jsmodules.io">A Guide to JavaScript Modules</a></li>
<li><a href="http://journal.crushlovely.com/post/89978453593/7-patterns-to-refactor-javascript-applications-query">7 Patterns to Refactor JavaScript Applications: Query Objects</a></li>
<li><a href="http://davidandsuzi.com/using-react-for-faster-renders-and-isomorphism-in-angular">Using React for Faster Renders and Isomosphism in Angular</a></li>
<li><a href="http://css-tricks.com/fixing-tables-long-strings/">Understanding Fixed Table Layout in CSS</a></li>
<li><a href="http://ariya.ofilabs.com/2014/07/extracting-parts-of-git-repository-and-keeping-the-history.html">Extracting Parts of Git Repository and Keeping the History</a></li>
<li><a href="http://www.smashingmagazine.com/2014/07/08/breakpoints-and-the-future-websites">Breakpoints And The Future Of Websites</a></li>
<li><a href="http://keyholesoftware.com/2014/07/07/lessons-in-automated-testing">Lessons Learned in Automated Testing</a></li>
<li><a href="http://strongloop.com/strongblog/automatic-node-js-clustering-with-log-aggregation">Automatic Node.js Clustering with Log Aggregation </a></li>
<li><a href="http://javascript.crockford.com/tdop/tdop.html">Top Down Operator Precedence</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ClusterJS, clusterify your NodeJS applications and achieve zero-downtime deployments]]></title>
    <link href="http://namshi.github.io/blog/2014/06/27/clusterjs-clusterify-your-nodejs-applications-and-achieve-zero-downtime-deployments/"/>
    <updated>2014-06-27T00:45:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/06/27/clusterjs-clusterify-your-nodejs-applications-and-achieve-zero-downtime-deployments</id>
    <content type="html"><![CDATA[<p>NodeJS has a very nice built-in support for clusters
through its native <a href="http://nodejs.org/api/cluster.html">cluster module</a>:
by using it and realizing we wanted to achieve zero-downtime
deployments (ZDD) on our node apps we decided to kick in.</p>

<!-- more -->


<p>This afternoon <a href="/team#Luciano%20Colosio">Lucio</a> came up to me
and asked me a simple question:</p>

<blockquote><p>Let&rsquo;s do some NodeJS today?</p></blockquote>

<p>and my answer was clear and simple: we need a robust solution
for ZDD, let&rsquo;s do this.</p>

<p>Before jumping with our usual <code>git init</code> and <code>npm init</code>
we searched a bit and found a few alternatives, which
weren&rsquo;t exactly fitting our scenarios:</p>

<ul>
<li><a href="http://learnboost.github.io/cluster/">learnboost/cluster</a>, which is
quite old, discontinued and hasn&rsquo;t been updated in a couple of years</li>
<li><a href="https://github.com/isaacs/cluster-master">isaacs/cluster-master</a>, which
seems to have a whole lot of great things but we wanted to have
the startup script as a global command rather than having to write
a script on our own (but we might wrap it, as it
has a lot of cool features, like resizing your cluster)</li>
</ul>


<p>At the end we decided to go for a simple solution after reading
<a href="http://jaxbot.me/articles/zero_downtime_nodejs_reloads_with_clusters_7_5_2013">this post from Jax</a>
that explains how to achieve ZDD on NodeJS.</p>

<p>In a few, very productive hours, Lucio was able to write
<a href="https://www.npmjs.org/package/clusterjs">ClusterJS</a> and
we decided to release it to the public, as it might
be interesting out there (and because we really like
to receive feedbacks!).</p>

<p>Suppose you have a typical <a href="http://expressjs.com/">ExpressJS</a>
app that runs through an <code>app.js</code> script, in order to run it through
ClusterJS you simply have to:</p>

<p>```
npm install -g clusterjs</p>

<p>clusterjs path/to/app.js
```</p>

<p>At this point you should be able to see something like this:</p>

<p>```
~/projects/clusterjs (master ✔) ᐅ clusterjs test/testApp/app.js</p>

<p>Booting a cluster of ./test/testApp/app.js
We are gonna be launching 4 workers
The cluster will reload on: SIGUSR2
&mdash;&ndash; test app loaded as pid: 21543
&mdash;&ndash; test app loaded as pid: 21544
&mdash;&ndash; test app loaded as pid: 21546
&mdash;&ndash; test app loaded as pid: 21547
Worker 1 running!
Worker 2 running!
Worker 3 running!
Worker 4 running!
```</p>

<p>Cool! You have just put your app in a cluster with four workers!</p>

<p>By default, ClusterJS will boot as many workers as CPUs
in your system; if you wanna change it, simply:</p>

<p>```
~/projects/clusterjs (master ✔) ᐅ clusterjs test/testApp/app.js &mdash;workers 10</p>

<p>Booting a cluster of ./test/testApp/app.js
We are gonna be launching 10 workers
The cluster will reload on: SIGUSR2
&mdash;&ndash; test app loaded as pid: 21636
&mdash;&ndash; test app loaded as pid: 21635
Worker 2 running!
Worker 1 running!
&mdash;&ndash; test app loaded as pid: 21650
&mdash;&ndash; test app loaded as pid: 21640
Worker 9 running!
&mdash;&ndash; test app loaded as pid: 21639
&mdash;&ndash; test app loaded as pid: 21641
Worker 4 running!
&mdash;&ndash; test app loaded as pid: 21644
Worker 5 running!
Worker 3 running!
Worker 6 running!
&mdash;&ndash; test app loaded as pid: 21648
&mdash;&ndash; test app loaded as pid: 21646
Worker 8 running!
&mdash;&ndash; test app loaded as pid: 21652
Worker 7 running!
Worker 10 running!
```</p>

<p>How to achieve ZDD? Simply issue a SIGUSR2 command
to your master process, after updating the files
in your app:</p>

<p>```
~/projects/clusterjs (master ✔) ᐅ clusterjs test/testApp/app.js &mdash;workers 2
Booting a cluster of ./test/testApp/app.js
We are gonna be launching 2 workers
The cluster will reload on: SIGUSR2
&mdash;&ndash; test app loaded as pid: 22007
&mdash;&ndash; test app loaded as pid: 22008
Worker 1 running!
Worker 2 running!</p>

<p>SIGUSR2 received, reloading the app
<strong><em> reloading workers!
restarting worker: 1
Shutdown complete for worker 1
Worker 1 died :(
&mdash;&ndash; test app loaded as pid: 22018
&mdash;&ndash; test app loaded as pid: 22021
Worker 3 running!
Worker 4 running!
Replacement worker online.
</em></strong> reloading workers!
restarting worker: 2
Shutdown complete for worker 2
Worker 2 died :(
&mdash;&ndash; test app loaded as pid: 22055
&mdash;&ndash; test app loaded as pid: 22056
Worker 5 running!
Worker 6 running!
Replacement worker online.
```</p>

<p>If you want to change the signal used to reload the cluster,
you can do it with a simple option:</p>

<p><code>
clusterjs test/testApp/app.js --workers 2 --reloadon SIGUSR1
</code></p>

<p>That&rsquo;s (basically) it! Kudos to Lucio for his work and&hellip;</p>

<p>&hellip;if you wanna play with ClusterJS or suggest any improvement,
feel free to have a look around, as
<a href="https://github.com/namshi/clusterjs">ClusterJS is on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reconfig: declarative JavaScript configurations]]></title>
    <link href="http://namshi.github.io/blog/2014/06/07/reconfi-declarative-javascript-configurations/"/>
    <updated>2014-06-07T00:50:00+04:00</updated>
    <id>http://namshi.github.io/blog/2014/06/07/reconfi-declarative-javascript-configurations</id>
    <content type="html"><![CDATA[<p>We recently published a new library that let&rsquo;s you
deal with configurations, in JavaScript, in a very
elegant way.</p>

<p>The library is called <a href="https://github.com/namshi/reconfig">Reconfig</a> and it&rsquo;s available
through <a href="https://www.npmjs.org/package/reconfig">NPM</a> (if you need on the browser we highly
recommend <a href="http://browserify.org/">browserify</a>): it&rsquo;s really
small and simple, and thought to keep your
configuration as elegant, simple and declarative as possible.</p>

<!-- more -->


<p>With reconfig you can do stuff like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">reconfig</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">reconfig</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span>  <span class="k">new</span> <span class="nx">reconfig</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">greet</span><span class="o">:</span> <span class="s1">&#39;Hello :who!&#39;</span><span class="p">,</span>
</span><span class='line'><span class="nx">sayhi</span><span class="o">:</span> <span class="s1">&#39;{{ greet }}&#39;</span>
</span><span class='line'><span class="nx">countries</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">uae</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">population</span><span class="o">:</span> <span class="s1">&#39;2M&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">nationalDay</span><span class="o">:</span> <span class="s1">&#39;December 2nd&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Retrieve a deep config value</span>
</span><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">countries</span><span class="p">.</span><span class="nx">uae</span><span class="p">.</span><span class="nx">nationalDay</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span> <span class="c1">// December, 2nd&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Pass parameters to the configuration</span>
</span><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">greet</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="p">{</span><span class="nx">who</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">John</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;});</span> <span class="c1">// Hello, John!&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Reference other configuration parameters</span>
</span><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">sayhi</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="p">{</span><span class="nx">who</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">John</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;});</span> <span class="c1">// Hello, John!&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Fallback values</span>
</span><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">something</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="p">{},</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">invalid</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span> <span class="c1">// invalid</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We&rsquo;re probably gonna look into porting the same to
PHP (another big player in our stack) so&hellip;stay tuned!</p>
]]></content>
  </entry>
  
</feed>
